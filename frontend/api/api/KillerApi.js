/*
 * Dybov's and Lavrov's SoA lab-1
 * Some dragons service
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient.js";

/**
* Killer service.
* @module api/KillerApi
* @version 1.0.0
*/
export class KillerApi {

    /**
    * Constructs a new KillerApi. 
    * @alias module:api/KillerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the dragonDragonIdKillPost operation.
     * @callback moduleapi/KillerApi~dragonDragonIdKillPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kill a dragon
     * Kill dragon
     * @param {Number} dragonId Dragon ID to kill.
     * @param {module:api/KillerApi~dragonDragonIdKillPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dragonDragonIdKillPost(dragonId, callback) {
      
      let postBody = null;
      // verify the required parameter 'dragonId' is set
      if (dragonId === undefined || dragonId === null) {
        throw new Error("Missing the required parameter 'dragonId' when calling dragonDragonIdKillPost");
      }

      let pathParams = {
        'dragonId': dragonId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/dragon/{dragonId}/kill', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teamsCreateTeamIdTeamNameTeamSizeStartCaveIdPost operation.
     * @callback moduleapi/KillerApi~teamsCreateTeamIdTeamNameTeamSizeStartCaveIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a team
     * Create a team
     * @param {Number} teamId Team ID to create.
     * @param {String} teamName Team name.
     * @param {Number} teamSize Team size.
     * @param {Number} startCaveId Cave ID, where team will be created.
     * @param {module:api/KillerApi~teamsCreateTeamIdTeamNameTeamSizeStartCaveIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsCreateTeamIdTeamNameTeamSizeStartCaveIdPost(teamId, teamName, teamSize, startCaveId, callback) {
      
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsCreateTeamIdTeamNameTeamSizeStartCaveIdPost");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsCreateTeamIdTeamNameTeamSizeStartCaveIdPost");
      }
      // verify the required parameter 'teamSize' is set
      if (teamSize === undefined || teamSize === null) {
        throw new Error("Missing the required parameter 'teamSize' when calling teamsCreateTeamIdTeamNameTeamSizeStartCaveIdPost");
      }
      // verify the required parameter 'startCaveId' is set
      if (startCaveId === undefined || startCaveId === null) {
        throw new Error("Missing the required parameter 'startCaveId' when calling teamsCreateTeamIdTeamNameTeamSizeStartCaveIdPost");
      }

      let pathParams = {
        'teamId': teamId,'teamName': teamName,'teamSize': teamSize,'startCaveId': startCaveId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = null;

      return this.apiClient.callApi(
        '/teams/create/{teamId}/{teamName}/{teamSize}/{startCaveId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}